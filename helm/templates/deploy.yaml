apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "connectivity-intake.fullname" . }}
  labels:
{{ include "connectivity-intake.labels" . | indent 4}}
spec:
  selector:
    matchLabels:
      app: {{ template "connectivity-intake.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate: 
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: {{ template "connectivity-intake.fullname" . }}
    spec:
      initContainers:
      - env:
        - name: PGDATABASE
          value: postgres
        - name: PGUSER
          value: postgres
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: password-superuser
              name: {{ template "connectivity-intake.fullname" . }}-patroni
        - name: PGUSER_OWNER
          valueFrom:
            secretKeyRef:
              key: database-owner-user
              name: {{ template "connectivity-intake.fullname" . }}
        - name: PGPASSWORD_OWNER
          valueFrom:
            secretKeyRef:
              key: database-owner-password
              name: {{ template "connectivity-intake.fullname" . }}
        - name: PGDATABASE_OWNER
          valueFrom:
            secretKeyRef:
              key: database-name
              name: {{ template "connectivity-intake.fullname" . }}
        - name: PGUSER_APP
          valueFrom: 
            secretKeyRef:
              key: database-app-user
              name: {{ template "connectivity-intake.fullname" . }}
        - name: PGPASSWORD_APP
          valueFrom: 
            secretKeyRef:
              key: database-app-password
              name: {{ template "connectivity-intake.fullname" . }}
        - name: PGPORT
          value: "5432"
        - name: PGHOST
          value: {{ template "connectivity-intake.fullname" . }}-patroni
        name: {{ template "connectivity-intake.fullname" . }}-provision-pg-credentials
        image: {{ .Values.image.psql.repository }}:{{ .Values.image.psql.tag }}
        resources:
          limits:
            cpu: {{ .Values.spilo.resources.limits.cpu }}
            memory: {{ .Values.spilo.resources.limits.memory }}
          requests:
            cpu: {{ .Values.spilo.resources.requests.cpu }}
            memory: {{ .Values.spilo.resources.requests.memory }}
        command:
          - /usr/bin/env
          - bash
          - -c
          - |
            set -euox pipefail;
            create-user-db -d $(PGDATABASE_OWNER) -u $(PGUSER_OWNER) -p $(PGPASSWORD_OWNER) --owner;
            alter-role $(PGUSER_OWNER) createrole;
            create-user-db -d $(PGDATABASE_OWNER) -u $(PGUSER_APP) -p $(PGPASSWORD_APP);
      - env:
        - name: SQITCH_TARGET
          value: "db:pg:"
        - name: PGUSER
          valueFrom: 
            secretKeyRef:
              key: database-owner-user
              name: {{ template "connectivity-intake.fullname" . }}
        - name: PGPASSWORD
          valueFrom: 
            secretKeyRef:
              key: database-owner-password
              name: {{ template "connectivity-intake.fullname" . }}
        - name: PGDATABASE
          valueFrom: 
            secretKeyRef:
              key: database-name
              name: {{ template "connectivity-intake.fullname" . }}
        - name: PGPORT
          value: "5432"
        - name: PGHOST
          value: {{ template "connectivity-intake.fullname" . }}-patroni
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        name: {{ template "connectivity-intake.fullname" . }}-wait-for-migrations
        image: {{ .Values.image.db.repository }}:{{ .Values.image.db.tag }}
        imagePullPolicy: {{ .Values.image.db.pullPolicy }}
        resources:
          limits:
            cpu: {{ .Values.spilo.resources.limits.cpu }}
            memory: {{ .Values.spilo.resources.limits.memory }}
          requests:
            cpu: {{ .Values.spilo.resources.requests.cpu }}
            memory: {{ .Values.spilo.resources.requests.memory }}
        command:
          - /usr/bin/env
          - bash
          - -c
          - |
            set -euox pipefail;
            while [ "$(sqitch status | tail -1)" != "Nothing to deploy (up-to-date)" ]; do
              sqitch deploy;
              echo "Waiting 10s for migrations to complete..."
              sleep 10;
            done;
      containers:
        - name: {{ template "connectivity-intake.fullname" . }}
          image: {{ .Values.image.app.repository }}:{{ .Values.image.app.tag }}
          imagePullPolicy: {{ .Values.image.app.pullPolicy }}
          env:
          - name: PGUSER
            valueFrom: 
              secretKeyRef:
                key: database-app-user
                name: {{ template "connectivity-intake.fullname" . }}
          - name: PGPASSWORD
            valueFrom: 
              secretKeyRef:
                key: database-app-password
                name: {{ template "connectivity-intake.fullname" . }}
          - name: PGDATABASE
            valueFrom: 
              secretKeyRef:
                key: database-name
                name: {{ template "connectivity-intake.fullname" . }}
          - name: PGPORT
            value: "5432"
          - name: PGHOST
            value: {{ template "connectivity-intake.fullname" . }}-patroni
          - name: SESSION_SECRET
            valueFrom: 
              secretKeyRef:
                key: session-secret
                name: {{ template "connectivity-intake.fullname" . }}
          - name: CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                key: client-secret
                name: {{ template "connectivity-intake.fullname" . }}-sso-express
          - name: HOST
            value: {{ .Values.route.host }}
          - name: NAMESPACE
            value: {{ .Values.app.namespace }}
          resources:
            requests:
              memory: {{ .Values.resources.app.requests.memory }}
              cpu: {{ .Values.resources.app.requests.cpu }}
            limits:
              memory: {{ .Values.resources.app.limits.memory }}
              cpu: {{ .Values.resources.app.limits.cpu }}
          ports:
            - containerPort: {{ .Values.app.port }}
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: {{ .Values.app.probesPort }}
            # we want the readiness threshold to fail fast,
            # to prevent any request from going to a pod that is not ready
            failureThreshold: 1
            successThreshold: 1
            periodSeconds: 5
            timeoutSeconds: 5
            initialDelaySeconds: 5
          livenessProbe:
          # the liveness probe is here to ensure that a pod does not get
          # stuck in a shutdown state. It needs to allow enough time for
          # the registered shutdown handler to run to completion.
            httpGet:
              path: /live
              port: {{ .Values.app.probesPort }}
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 3
            successThreshold: 1
            timeoutSeconds: 5
          continuousArchive:
            # Specifies whether continuous archiving with wal-g should be enabled
            enabled: true
            # Cron schedule for doing base backups
            scheduleCronJob: 00 01 * * *
            # Amount of base backups to retain
            retainBackups: 15

            # The storage solution used by wal-g: pvc (default), s3, or gcs are supported by this helm chart
            # https://github.com/wal-g/wal-g/blob/master/docs/STORAGES.md
            storage: pvc
            pvc:
              storageClass: netapp-file-backup
              size: {{ .Values.spilo.pvc.size }}

            s3:
              bucket: ~
              secretName: ~
            gcs:
              bucket: ~
              # The GCS  bucket folder where the logs will be updated
              backupLocation: wal
              # Name of the secret that holds the credentials to the bucket
              credentialSecretName: ~

          persistentVolume:
            enabled: true
            size: {{ .Values.spilo.persistentVolume.size }}
            storageClass: "netapp-block-standard"
            subPath: ""
            mountPath: "/home/postgres/pgdata"
            annotations: {}
            accessModes:
              - ReadWriteOnce
