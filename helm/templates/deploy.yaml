apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  labels:
{{ include "connectivity-intake.labels" . | indent 4}}
spec:
  selector:
    matchLabels:
      app: {{ .Values.name }}
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate: 
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: {{ .Values.name }}
    spec:
      initContainers:
      - env:
        - name: SQITCH_TARGET
          value: "db:pg:"
        - name: PGUSER
          valueFrom: 
            secretKeyRef:
              key: database-user
              name: {{ .Values.name }}
        - name: PGPASSWORD
          valueFrom: 
            secretKeyRef:
              key: database-password
              name: {{ .Values.name }}
        - name: PGDATABASE
          valueFrom: 
            secretKeyRef:
              key: database-name
              name: {{ .Values.name }}
        - name: PGPORT
          value: "5432"
        - name: PGHOST
          value: {{ .Values.name }}-patroni
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        name: {{ .Values.name }}-wait-for-migrations
        image: {{ .Values.image.schema.repository }}:{{ .Values.image.schema.tag }}
        resources:
          limits:
            cpu: 200m
            memory: 128Mi
          requests:
            cpu: 80m
            memory: 64Mi
        command:
          - /usr/bin/env
          - bash
          - -c
          - |
            set -euo pipefail;
            pushd schema;
            while [ "$(sqitch status | tail -1)" != "Nothing to deploy (up-to-date)" ]; do
              echo "Waiting 10s for migrations to complete..."
              sleep 10;
            done;
      containers:
        - name: {{ .Values.name }}
          image: {{ .Values.image.app.repository }}:sha-{{ .Values.image.app.tag }}
          imagePullPolicy: {{ .Values.image.app.pullPolicy }}
          resources:
            requests:
              memory: {{ .Values.resources.app.requests.memory }}
              cpu: {{ .Values.resources.app.requests.cpu }}
            limits:
              memory: {{ .Values.resources.app.limits.memory }}
              cpu: {{ .Values.resources.app.limits.cpu }}
          ports:
            - containerPort: {{ .Values.port }}
              protocol: TCP
          readinessProbe: 
            httpGet:
              path: /
              port: {{ .Values.port }}
            failureThreshold: 1
            successThreshold: 1
            periodSeconds: 5
            timeoutSeconds: 5
            initialDelaySeconds: 5  
